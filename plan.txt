* Type rep + subtype + parse + print

(defprotocol IType
  (-subtype [this t])
  (-var-promote [this v])
  (-var-demote [this v])
  (-print-type [this]))

def-type

(defprotocol IFilter 
  (-print-filter [this]))

(defprotocol IObject
  (-print-object [this]))

(defprotocol IPathElement
  (-print-path-element [this]))

* objects?

* init env
* type env

* single arity type

* full occurrence typing
* full polymorphism

* Vectorof Vector* Listof List*

* (-val ) constructor
* (def-type-alias False (-val false))

* filters
** refer to arguments by integer 0-based position 

* Base types
** Boolean, Symbol, Keyword, String, Long, Float
** automates (subtype (value 1) Boolean)
** base types know their type predicate test

ProtocolType
ClassType
BaseType

(+T inc [Number -> Number])
